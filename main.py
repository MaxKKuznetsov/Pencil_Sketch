import numpy as npimport imageioimport scipyimport scipy.ndimageimport matplotlib.pyplot as pltin_file = 'img_in/test1.png'out_file = 'img_out/out.png'def black_and_white(input_image_path,    output_image_path):    start_img = imageio.imread(input_image_path)  # open colour image    gray_img = grayscale(start_img)    inverted_img = 255-gray_img    ndimageblur_img = scipy.ndimage.filters.gaussian_filter(inverted_img, sigma=5)    final_img = dodge(ndimageblur_img, gray_img)    plt.imsave(output_image_path, final_img, cmap ='gray', vmin = 0, vmax = 255)def grayscale(rgb):    return np.dot(rgb[..., :3], [0.299, 0.587, 0.114])def dodge(front,back):    result = front * 255 / (255 - back)    result[result > 255] = 255    result[back == 255] = 255    return result.astype('uint8')if __name__ == '__main__':    black_and_white(in_file,        out_file)